{
  "FileID":  573785173,
  "FileVersion":  8,
  "ViewPos.x":  -315,
  "ViewPos.y":  -414,
  "ScriptName":  "Cat_Guns",
  "ScriptFileOut":  "C:\\Users\\DmitB\\Downloads\\Cat_Guns.scr",
  "ScriptTextOut":  "C:\\Users\\DmitB\\Downloads\\Cat_Guns.txt",
  "Visual.Objects":  
  [
    {
      "Groups":      
      [
        {
          "Type":  "TGroup",
          "Name":  "GroupNew",
          "Pos.x":  220,
          "Pos.y":  390,
          "Parent":  -1,
          "#":  1,
          "Owner":  62,
          "Group.Type":  126,
          "CntShipMin":  1,
          "CntShipMax":  1,
          "SpeedMin":  100,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "AddPlayer":  true,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "DistSearch":  10000,
          "Dialog":  -1,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Operations":      
      [
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  320,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  5,
          "Code.Type":  "Global",
          "Code":          
          [
              "GRun();"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  340,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  7,
          "Code.Type":  "Init",
          "Code":          
          [
              "//Code created by WPRA\\\\",
              "//Код сделан РККА\\\\",
              "//MADE IN USSR\\\\",
              "//СДЕЛАНО В СССР\\\\",
              "",
              "",
              "",
              "",
              "//SFT('LOG');",
              "//Начальные иниты",
              "countermin=CurTurn()+40;",
              "InventNewGuns();",
              "UpdateSpawnRules();",
              "UpdateGTLRules();",
              "UpdateStationsRules();",
              "UpdateShipsRules();",
              "gunUpdateCheck=CT('Items.Weapon.CustomWeapon.StatsVersion.Cat_Guns');",
              "UpdateSpawnRule=CT('Items.Weapon.CustomWeapon.GunsSpawnStatsVersion.Cat_Guns');",
              "UpdateGTLRule=CT('Items.Weapon.CustomWeapon.GunsGTLStatsVersion.Cat_Guns');",
              "UpdateStationsRule=CT('Items.Weapon.CustomWeapon.GunsStationStatsVersion.Cat_Guns');",
              "UpdateShipsRule=CT('Items.Weapon.CustomWeapon.GunsShipsStatsVersion.Cat_Guns');",
              "",
              "//Функция для объявления и обновления кастомных орудий",
              "function RaceConvertor (str race){",
              "    if(race == 'Maloc'){",
              "        result=0;",
              "    }",
              "    else if(race == 'Peleng'){",
              "        result=1;",
              "    }",
              "    else if(race == 'People'){",
              "        result=2;",
              "    }",
              "    else if(race == 'Fei'){",
              "        result=3;",
              "    }",
              "    else if(race == 'Gaal'){",
              "        result=4;",
              "    }",
              "    else if(race == 'Kling'){",
              "        result=5;",
              "    }",
              "    else if(race == 'None'){",
              "        result=6;",
              "    }",
              "    else {",
              "        result=7;",
              "    }",
              "}",
              "function InventNewGuns()",
              "{",
              "    for(i=1;i<=CT('Items.Weapon.CustomWeapon.Guns.Count');i=i+1)",
              "    {",
              "        //По очереди выбираем системное название каждой новой пушки из Lang",
              "        tstr=CT('Items.Weapon.CustomWeapon.Guns.'+i);",
              "        tstr2='Items.Weapon.CustomWeapon.';",
              "        //Прописываем пушку/сбрасываем уже прописанную пушку до уровня базовой из оригинальной игры",
              "        if(tstr == 'palach'){",
              "            tdwd=InventNewCustomWeapon(tstr,t_Weapon1-1+CT('Items.Weapon.OriginalWeaponType.'+CT(tstr2+tstr+'.BaseGun')));",
              "            //Задаём характеристики оружия",
              "            SetCustomWeaponShotData(tdwd,CT(tstr2+tstr+'.ShotType'),CT(tstr2+tstr+'.Speed'),CT(tstr2+tstr+'.AverageRadius'),CT(tstr2+tstr+'.SecondaryDamageRadius'),CT(tstr2+tstr+'.MiningFactor'),CT(tstr2+tstr+'.ShotsPerTurn'));",
              "            SetCustomWeaponDamageData(tdwd,CT(tstr2+tstr+'.MinDamage'),CT(tstr2+tstr+'.MaxDamage'),CT(tstr2+tstr+'.DamageSet'),CT(tstr2+tstr+'.mWeaponDamage'));",
              "            SetCustomWeaponPrimaryData(tdwd,CT(tstr2+tstr+'.TechLevel'),t_Weapon1-1+CT('Items.Weapon.OriginalWeaponType.'+CT(tstr2+tstr+'.InventTechLevel')),t_Weapon1-1+CT('Items.Weapon.OriginalWeaponType.'+CT(tstr2+tstr+'.ArcadeType')));",
              "            SetCustomWeaponSizeAndCost(tdwd,CT(tstr2+tstr+'.kCost'),CT(tstr2+tstr+'.AverageSize'));",
              "            SetCustomWeaponAvailability(tdwd,CT(tstr2+tstr+'.StoreAvailability'));",
              "            SetCustomWeaponSE(tdwd,'Weapon.12','Weapon.12','',30);",
              "        } else {",
              "            tdwd=InventNewCustomWeapon(tstr,t_Weapon1-1+CT('Items.Weapon.OriginalWeaponType.'+CT(tstr2+tstr+'.BaseGun')));",
              "            //Задаём характеристики оружия",
              "            SetCustomWeaponShotData(tdwd,CT(tstr2+tstr+'.ShotType'),CT(tstr2+tstr+'.Speed'),CT(tstr2+tstr+'.AverageRadius'),CT(tstr2+tstr+'.SecondaryDamageRadius'),CT(tstr2+tstr+'.MiningFactor'),CT(tstr2+tstr+'.ShotsPerTurn'));",
              "            SetCustomWeaponDamageData(tdwd,CT(tstr2+tstr+'.MinDamage'),CT(tstr2+tstr+'.MaxDamage'),CT(tstr2+tstr+'.DamageSet'),CT(tstr2+tstr+'.mWeaponDamage'));",
              "            SetCustomMissileWeaponStats(tdwd,CT(tstr2+tstr+'.MissileRadius'),CT(tstr2+tstr+'.MissileMaxSpeed'),CT(tstr2+tstr+'.MissileMinSpeed'),CT(tstr2+tstr+'.MissileChanceToBeHit'));",
              "            SetCustomWeaponPrimaryData(tdwd,CT(tstr2+tstr+'.TechLevel'),t_Weapon1-1+CT('Items.Weapon.OriginalWeaponType.'+CT(tstr2+tstr+'.InventTechLevel')),t_Weapon1-1+CT('Items.Weapon.OriginalWeaponType.'+CT(tstr2+tstr+'.ArcadeType')));",
              "            SetCustomWeaponSizeAndCost(tdwd,CT(tstr2+tstr+'.kCost'),CT(tstr2+tstr+'.AverageSize'));",
              "            SetCustomWeaponAvailability(tdwd,CT(tstr2+tstr+'.StoreAvailability'));",
              "            SetCustomWeaponSE(tdwd,CT(tstr2+tstr+'.ShotEffectPath'),CT(tstr2+tstr+'.SplashEffectPath'),CT(tstr2+tstr+'.MissileExplosionEffectPath'),CT(tstr2+tstr+'.ShotEffectPalette'));",
              "        }",
              "",
              "    }",
              "}",
              "//Подробнее про то что добавляем в массивы можно почитать в ланге",
              "//Инициализация всей хрени что прописана в спавне,и добавление её в многомерный массив",
              "function UpdateSpawnRules() {",
              "    countermin=CurTurn() + 70;",
              "    ArrayClear(spawnrules);",
              "    ArrayClear(tarr1);",
              "    ArrayClear(counterguns);",
              "    for(i = 1;i <= CT('Items.Weapon.CustomWeapon.SpawnRules.Count');i = i +1){",
              "        tstr1='Items.Weapon.CustomWeapon.SpawnRules.'+i;",
              "        ArrayAdd(counterguns,CurTurn()+Rnd(CT(tstr1+'.MinCountRepeat'),CT(tstr1+'.MaxCountRepeat')));",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnCountMin'),'SpawnCountMin');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnCountMax'),'SpawnCountMax');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.CanSell'),'CanSell');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.MinCountRepeat'),'MinCountRepeat');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MaxCountRepeat'),'MaxCountRepeat');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.ChanceToSpawn'),'ChanceToSpawn');",
              "        ArrayAdd(tarr1,CT(tstr1+'.ChanceToSpawnPerPl'),'ChanceToSpawnPerPl');",
              "        ArrayAdd(tarr1,CT(tstr1+'.ChanceToSpawnPerSt'),'ChanceToSpawnPerSt');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnType'),'SpawnType');",
              "",
              "        //PlanetsRule - заносим как отдельный массив",
              "        //Также сначала проверим на предначертаные значения All CoalitionOnly и прочая хрень",
              "        //Также для своего удобства заношу tstr1+'.PlanetRule' во временную переменную для дальнейшей работы",
              "        if(CT(tstr1+'.SpawnType') == 1 || CT(tstr1+'.SpawnType') == 3){",
              "            ArrayAdd(tarr1,CT(tstr1+'.RacePlId'),'RacePlId');",
              "            tstr2=tstr1+'.PlanetsRule';",
              "            if(CT(tstr2) == 'All'){",
              "                ArrayAdd(tarr1,'All','PlanetRule');",
              "            }",
              "            else if(CT(tstr2) == 'CoalitionOnly') {",
              "                ArrayAdd(tarr1,'CoalitionOnly','PlanetRule');",
              "            }",
              "            else if(CT(tstr2)  == 'PirateOnly') {",
              "                ArrayAdd(tarr1,'PirateOnly','PlanetRule');",
              "            }",
              "            else {",
              "                for(j = 1;j <= CT(tstr2 + '.Count');j = j +1) {",
              "                    ArrayAdd(temparray,RaceConvertor(CT(tstr2 + '.' + j)));",
              "                }",
              "                ArrayAdd(tarr1,CT(tstr2 + '.Count'),'PlanetRuleCount');",
              "                ArrayAdd(tarr1,1,'PlanetRule');",
              "                copy(tarr1['PlanetRule'],temparray);",
              "            }",
              "        }",
              "        ArrayClear(temparray);",
              "        if(CT(tstr1+'.SpawnType') == 1 || CT(tstr1+'.SpawnType') == 2){",
              "            tstr2=tstr1+'.StationsRule';",
              "            if(CT(tstr2) == 'All'){",
              "                ArrayAdd(tarr1,'All','StationRule');",
              "            }",
              "            else {",
              "                for(j = 1;j <= CT(tstr2 + '.Count');j = j +1){",
              "                    ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "                }",
              "                ArrayAdd(tarr1,CT(tstr2 + '.Count'),'StationRuleCount');",
              "                ArrayAdd(tarr1,1,'StationRule');",
              "                copy(tarr1['StationRule'],temparray);",
              "            }",
              "        }",
              "        ArrayClear(temparray);",
              "        ArrayAdd(tarr1,CT(tstr1+'.MissileUp'),'MissileUp');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.AcrynType'),'AcrynType');",
              "        if(CT(tstr1+'.AcrynType') == 2){",
              "            tstr2=tstr1+'.AcrynInCfg';",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1) {",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'AcrynsCount');",
              "            ArrayAdd(tarr1,1,'AcrynInCfg');",
              "            copy(tarr1['AcrynInCfg'],temparray);",
              "        }",
              "        else {",
              "            if(CT(tstr1+'.AcrynType') != 0){",
              "                ArrayAdd(tarr1,CT(tstr1+'.AcrynInCfg'),'AcrynInCfg');",
              "            }",
              "        }",
              "        ArrayClear(temparray);",
              "        ArrayAdd(tarr1,CT(tstr1+'.MMType'),'MMType');",
              "        if(CT(tstr1+'.MMType') == 2){",
              "            tstr2=tstr1+'.MMInCfg';",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1){",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'MMCount');",
              "            ArrayAdd(tarr1,1,'MMInCfg');",
              "            copy(tarr1['MMInCfg'],temparray);",
              "        }",
              "        else {",
              "            if(CT(tstr1+'.MMType') != 0){",
              "                ArrayAdd(tarr1,CT(tstr1+'.MMInCfg'),'MMInCfg');",
              "            }",
              "        }",
              "        ArrayClear(temparray);",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.ActCode'),'ActCode');",
              "        ArrayAdd(tarr1,CT(tstr1+'.UseCode'),'UseCode');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SizeMin'),'SizeMin');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SizeMax'),'SizeMax');",
              "        tstr2=tstr1+'.Race';",
              "        for(j = 1;j <= CT(tstr2 + '.Count');j = j +1){",
              "            ArrayAdd(temparray,RaceConvertor(CT(tstr2 + '.' + j)));",
              "        }",
              "        ArrayAdd(tarr1,CT(tstr2 + '.Count'),'RaceCount');",
              "        ArrayAdd(tarr1,1,'Race');",
              "        copy(tarr1['Race'],temparray);",
              "        ArrayClear(temparray);",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.SubRace'),'SubRace');",
              "        ArrayAdd(tarr1,CT(tstr1+'.CustomRace'),'CustomRace');",
              "        ArrayAdd(tarr1,CT(tstr1+'.CustomRaceChance'),'CustomRaceChance');",
              "        ArrayAdd(tarr1,CT(tstr1+'.kCost'),'kCost');",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTLRule'),'GTLRule');",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTL'),'GTL');",
              "        ArrayAdd(tarr1,CT(tstr1+'.IName'),'IName');",
              "",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTLRem'),'GTLRem');",
              "",
              "",
              "        ArrayClear(temparray);",
              "        tstr2=tstr1+'.CustomRepeatGtl';",
              "        if(CT(tstr2) != 'No'){",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1) {",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,1,'CustomRepeatGtl');",
              "            copy(tarr1['CustomRepeatGtl'],temparray);",
              "        }",
              "        else {",
              "            ArrayAdd(tarr1,CT(tstr1+'.CustomRepeatGtl'),'CustomRepeatGtl');",
              "        }",
              "        ArrayClear(temparray);",
              "        tstr2=tstr1+'.SetCustomProps';",
              "        if(CT(tstr2) != 'No'){",
              "            for(j = 0;j < CT(tstr2 + '.Count');j = j +1) {",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'SetCustomPropsCount');",
              "            ArrayAdd(tarr1,1,'SetCustomProps');",
              "            copy(tarr1['SetCustomProps'],temparray);",
              "        }",
              "        else {",
              "            ArrayAdd(tarr1,CT(tstr1+'.SetCustomProps'),'SetCustomProps');",
              "        }",
              "        ArrayClear(temparray);",
              "        ArrayClear(tarr2);",
              "        tstr2=tstr1+'.CustomPropsGtl';",
              "        if(CT(tstr2) != 'No' && CT(tstr1+'.SetCustomProps') != 'No'){",
              "            for(j = 0;j < CT(tstr1+'.SetCustomProps' + '.Count');j = j +1) {",
              "                for(v = 0;v < CT(tstr2 + '.Count');v = v +1) {",
              "                    ArrayAdd(tarr2,CT(tstr2 + '.' + j + '.' + v));",
              "                }",
              "                ArrayAdd(temparray,1);",
              "                copy(temparray[j],tarr2);",
              "                ArrayClear(tarr2);",
              "            }",
              "            ArrayAdd(tarr1,1,'CustomPropsGtl');",
              "            copy(tarr1['CustomPropsGtl'],temparray);",
              "            ArrayClear(temparray);",
              "        }",
              "",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.WeaponType'),'WeaponType');",
              "        ArrayAdd(tarr1,CT(tstr1+'.WeaponName'),'WeaponName');",
              "        ArrayAdd(spawnrules,1,i);",
              "        copy(spawnrules[i],tarr1);",
              "        ArrayClear(temparray);",
              "        ArrayClear(tarr1);",
              "    }",
              "}",
              "//Инициализация всей хрени что прописана в правилах гту,и добавление её в массив",
              "function UpdateGTLRules() {",
              "    countermingtl=CurTurn() + 4;",
              "    ArrayClear(gtlrules);",
              "    ArrayClear(tarr1);",
              "    ArrayClear(countergtl);",
              "    for(i = 1;i <= CT('Items.Weapon.CustomWeapon.GTLRulesArrow.Count');i = i + 1){",
              "        tstr2=CT('Items.Weapon.CustomWeapon.GTLRulesArrow.'+i);",
              "        tstr1='Items.Weapon.CustomWeapon.GTLRules.'+tstr2;",
              "        ArrayAdd(gtlrulesar,tstr2);",
              "        ArrayAdd(countergtl,Rnd(CT(tstr1+'.TurnUpMin'),CT(tstr1+'.TurnUpMax')));",
              "        ArrayAdd(tarr1,CT(tstr1+'.TurnUpMin'),'TurnUpMin');",
              "        ArrayAdd(tarr1,CT(tstr1+'.TurnUpMax'),'TurnUpMax');",
              "        ArrayAdd(tarr1,CT(tstr1+'.UpCoof'),'UpCoof');",
              "        ArrayAdd(tarr1,CT(tstr1+'.TechLevel'),'TechLevel');",
              "        ArrayAdd(tarr1,CT(tstr1+'.StartTL'),'StartTL');",
              "        ArrayAdd(tarr1,CT(tstr1+'.ModifyDifSc'),'ModifyDifSc');",
              "        ArrayAdd(tarr1,CT(tstr1+'.ModifyDifEq'),'ModifyDifEq');",
              "        ArrayAdd(gtlrules,i,tstr2);",
              "        copy(gtlrules[tstr2],tarr1);",
              "        ArrayClear(tarr1);",
              "    }",
              "}",
              "//Инициализация всей хрени что прописана в правилах для станций,и добавление её в многомерный массив",
              "function UpdateStationsRules () {",
              "    counterminst=CurTurn() + 60;",
              "    ArrayClear(stationrules);",
              "    ArrayClear(counterst);",
              "    for(i = 1;i <= CT('Items.Weapon.CustomWeapon.StationRules.Count');i = i +1){",
              "        tstr1='Items.Weapon.CustomWeapon.StationRules.'+i;",
              "        ArrayAdd(counterst,CurTurn()+Rnd(CT(tstr1+'.MinCountRepeat'),CT(tstr1+'.MaxCountRepeat')));",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnCountMin'),'SpawnCountMin');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnCountMax'),'SpawnCountMax');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.MaxCount'),'MaxCount');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnRepeat'),'SpawnRepeat');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MinGuns'),'MinGuns');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MaxGuns'),'MaxGuns');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MinCountRepeat'),'MinCountRepeat');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MaxCountRepeat'),'MaxCountRepeat');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.ChanceToSpawn'),'ChanceToSpawn');",
              "        ArrayAdd(tarr1,CT(tstr1+'.ChanceToSpawnPerSt'),'ChanceToSpawnPerSt');",
              "",
              "        tstr2=tstr1+'.StationsRule';",
              "        if(CT(tstr2) == 'All'){",
              "            ArrayAdd(tarr1,'All','StationRule');",
              "        }",
              "        else {",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1){",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'StationRuleCount');",
              "            ArrayAdd(tarr1,1,'StationRule');",
              "            copy(tarr1['StationRule'],temparray);",
              "        }",
              "        ArrayClear(temparray);",
              "        ArrayAdd(tarr1,CT(tstr1+'.MissileUp'),'MissileUp');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.AcrynType'),'AcrynType');",
              "        if(CT(tstr1+'.AcrynType') == 2){",
              "            tstr2=tstr1+'.AcrynInCfg';",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1) {",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'AcrynsCount');",
              "",
              "            ArrayAdd(tarr1,1,'AcrynInCfg');",
              "            copy(tarr1['AcrynInCfg'],temparray);",
              "        }",
              "        else {",
              "            if(CT(tstr1+'.AcrynType') != 0){",
              "                ArrayAdd(tarr1,CT(tstr1+'.AcrynInCfg'),'AcrynInCfg');",
              "            }",
              "        }",
              "        ArrayClear(temparray);",
              "        ArrayAdd(tarr1,CT(tstr1+'.MMType'),'MMType');",
              "        if(CT(tstr1+'.MMType') == 2){",
              "            tstr2=tstr1+'.MMInCfg';",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1){",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'MMCount');",
              "            ArrayAdd(tarr1,1,'MMInCfg');",
              "            copy(tarr1['MMInCfg'],temparray);",
              "        }",
              "        else {",
              "            if(CT(tstr1+'.MMType') != 0){",
              "                ArrayAdd(tarr1,CT(tstr1+'.MMInCfg'),'MMInCfg');",
              "            }",
              "        }",
              "        ArrayClear(temparray);",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.ActCode'),'ActCode');",
              "        ArrayAdd(tarr1,CT(tstr1+'.UseCode'),'UseCode');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SizeMin'),'SizeMin');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SizeMax'),'SizeMax');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MinGuns'),'MinGuns');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MaxGuns'),'MaxGuns');",
              "        tstr2=tstr1+'.Race';",
              "        for(j = 1;j <= CT(tstr2 + '.Count');j = j +1) {",
              "            ArrayAdd(temparray,RaceConvertor(CT(tstr2 + '.' + j)));",
              "        }",
              "        ArrayAdd(tarr1,CT(tstr2 + '.Count'),'RaceCount');",
              "        ArrayAdd(tarr1,1,'Race');",
              "        copy(tarr1['Race'],temparray);",
              "",
              "        ArrayClear(temparray);",
              "        ArrayAdd(tarr1,CT(tstr1+'.SubRace'),'SubRace');",
              "        ArrayAdd(tarr1,CT(tstr1+'.CustomRace'),'CustomRace');",
              "        ArrayAdd(tarr1,CT(tstr1+'.CustomRaceChance'),'CustomRaceChance');",
              "        ArrayAdd(tarr1,CT(tstr1+'.kCost'),'kCost');",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTLRule'),'GTLRule');",
              "        ArrayAdd(tarr1,CT(tstr1+'.IName'),'IName');",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTL'),'GTL');",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTLRem'),'GTLRem');",
              "        ArrayAdd(tarr1,CT(tstr1+'.CanSell'),'CanSell');",
              "",
              "",
              "",
              "        ArrayClear(temparray);",
              "        tstr2=tstr1+'.CustomRepeatGtl';",
              "        if(CT(tstr2) != 'No'){",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1) {",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,1,'CustomRepeatGtl');",
              "            copy(tarr1['CustomRepeatGtl'],temparray);",
              "        }",
              "        else {",
              "            ArrayAdd(tarr1,CT(tstr1+'.CustomRepeatGtl'),'CustomRepeatGtl');",
              "        }",
              "        ArrayClear(temparray);",
              "        tstr2=tstr1+'.SetCustomProps';",
              "        if(CT(tstr2) != 'No'){",
              "            for(j = 0;j < CT(tstr2 + '.Count');j = j +1) {",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'SetCustomPropsCount');",
              "            ArrayAdd(tarr1,1,'SetCustomProps');",
              "            copy(tarr1['SetCustomProps'],temparray);",
              "        }",
              "        else {",
              "            ArrayAdd(tarr1,CT(tstr1+'.SetCustomProps'),'SetCustomProps');",
              "        }",
              "        ArrayClear(temparray);",
              "        ArrayClear(tarr2);",
              "        tstr2=tstr1+'.CustomPropsGtl';",
              "        if(CT(tstr2) != 'No' && CT(tstr1+'.SetCustomProps') != 'No'){",
              "            for(j = 0;j < CT(tstr1+'.SetCustomProps' + '.Count');j = j +1) {",
              "                for(v = 0;v < CT(tstr2 + '.Count');v = v +1) {",
              "                    ArrayAdd(tarr2,CT(tstr2 + '.' + j + '.' + v));",
              "                }",
              "                ArrayAdd(temparray,1);",
              "                copy(temparray[j],tarr2);",
              "                ArrayClear(tarr2);",
              "            }",
              "            ArrayAdd(tarr1,1,'CustomPropsGtl');",
              "            copy(tarr1['CustomPropsGtl'],temparray);",
              "            ArrayClear(temparray);",
              "        }",
              "",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.WeaponType'),'WeaponType');",
              "        ArrayAdd(tarr1,CT(tstr1+'.WeaponName'),'WeaponName');",
              "        ArrayAdd(stationrules,1,i);",
              "        copy(stationrules[i],tarr1);",
              "        ArrayClear(temparray);",
              "        ArrayClear(tarr1);",
              "    }",
              "}",
              "//Инициализация всей хрени что прописана в правилах для кораблей,и добавление её в многомерный массив",
              "function UpdateShipsRules () {",
              "    counterminsh=CurTurn() + 60;",
              "    ArrayClear(shipsrules);",
              "    ArrayClear(tarr1);",
              "    ArrayClear(countership);",
              "    for(i = 1;i <= CT('Items.Weapon.CustomWeapon.ShipsRules.Count');i = i +1){",
              "        tstr1='Items.Weapon.CustomWeapon.ShipsRules.'+i;",
              "        ArrayAdd(countership,CurTurn()+Rnd(CT(tstr1+'.MinCountRepeat'),CT(tstr1+'.MaxCountRepeat')));",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnCountMin'),'SpawnCountMin');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnCountMax'),'SpawnCountMax');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.MaxCount'),'MaxCount');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SpawnRepeat'),'SpawnRepeat');",
              "        ArrayAdd(tarr1,CT(tstr1+'.CanSell'),'CanSell');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MinCountRepeat'),'MinCountRepeat');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MaxCountRepeat'),'MaxCountRepeat');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.ChanceToSpawn'),'ChanceToSpawn');",
              "        ArrayAdd(tarr1,CT(tstr1+'.ChanceToSpawnPerShip'),'ChanceToSpawnPerShip');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.ShipsType'),'ShipsType');",
              "        ArrayAdd(tarr1,CT(tstr1+'.ShipsMinSize'),'ShipsMinSize');",
              "        ArrayAdd(tarr1,CT(tstr1+'.ShipsSubType'),'ShipsSubType');",
              "        //PlanetsRule - заносим как отдельный массив",
              "        //Также сначала проверим на предначертаные значения All CoalitionOnly и прочая хрень",
              "        //Также для своего удобства заношу tstr1+'.PlanetRule' во временную переменную для дальнейшей работы",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.MissileUp'),'MissileUp');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.AcrynType'),'AcrynType');",
              "        if(CT(tstr1+'.AcrynType') == 2){",
              "            tstr2=tstr1+'.AcrynInCfg';",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1){",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'AcrynsCount');",
              "            ArrayAdd(tarr1,1,'AcrynInCfg');",
              "            copy(tarr1['AcrynInCfg'],temparray);",
              "        }",
              "        else {",
              "            if(CT(tstr1+'.AcrynType') != 0){",
              "                ArrayAdd(tarr1,CT(tstr1+'.AcrynInCfg'),'AcrynInCfg');",
              "            }",
              "        }",
              "        ArrayClear(temparray);",
              "        ArrayAdd(tarr1,CT(tstr1+'.MMType'),'MMType');",
              "        if(CT(tstr1+'.MMType') == 2){",
              "            tstr2=tstr1+'.MMInCfg';",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1){",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'MMCount');",
              "            ArrayAdd(tarr1,1,'MMInCfg');",
              "            copy(tarr1['MMInCfg'],temparray);",
              "        }",
              "        else {",
              "            if(CT(tstr1+'.MMType') != 0){",
              "                ArrayAdd(tarr1,CT(tstr1+'.MMInCfg'),'MMInCfg');",
              "            }",
              "        }",
              "        ArrayClear(temparray);",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.ActCode'),'ActCode');",
              "        ArrayAdd(tarr1,CT(tstr1+'.UseCode'),'UseCode');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SizeMin'),'SizeMin');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SizeMax'),'SizeMax');",
              "        tstr2=tstr1+'.Race';",
              "        for(j = 1;j <= CT(tstr2 + '.Count');j = j +1){",
              "            ArrayAdd(temparray,RaceConvertor(CT(tstr2 + '.' + j)));",
              "        }",
              "        ArrayAdd(tarr1,CT(tstr2 + '.Count'),'RaceCount');",
              "",
              "        ArrayAdd(tarr1,1,'Race');",
              "        copy(tarr1['Race'],temparray);",
              "",
              "",
              "        ArrayClear(temparray);",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.SubRace'),'SubRace');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.CustomRace'),'CustomRace');",
              "        ArrayAdd(tarr1,CT(tstr1+'.CustomRaceChance'),'CustomRaceChance');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.kCost'),'kCost');",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTLRule'),'GTLRule');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.IName'),'IName');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MinGuns'),'MinGuns');",
              "        ArrayAdd(tarr1,CT(tstr1+'.MaxGuns'),'MaxGuns');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTL'),'GTL');",
              "        ArrayAdd(tarr1,CT(tstr1+'.GTLRem'),'GTLRem');",
              "",
              "",
              "        ArrayClear(temparray);",
              "        tstr2=tstr1+'.CustomRepeatGtl';",
              "        if(CT(tstr2) != 'No'){",
              "            for(j = 1;j <= CT(tstr2 + '.Count');j = j +1) {",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,1,'CustomRepeatGtl');",
              "            copy(tarr1['CustomRepeatGtl'],temparray);",
              "        }",
              "        else {",
              "            ArrayAdd(tarr1,CT(tstr1+'.CustomRepeatGtl'),'CustomRepeatGtl');",
              "        }",
              "        ArrayClear(temparray);",
              "        tstr2=tstr1+'.SetCustomProps';",
              "        if(CT(tstr2) != 'No'){",
              "            for(j = 0;j < CT(tstr2 + '.Count');j = j +1) {",
              "                ArrayAdd(temparray,CT(tstr2 + '.' + j));",
              "            }",
              "            ArrayAdd(tarr1,CT(tstr2 + '.Count'),'SetCustomPropsCount');",
              "            ArrayAdd(tarr1,1,'SetCustomProps');",
              "            copy(tarr1['SetCustomProps'],temparray);",
              "        }",
              "        else {",
              "            ArrayAdd(tarr1,CT(tstr1+'.SetCustomProps'),'SetCustomProps');",
              "        }",
              "        ArrayClear(temparray);",
              "        ArrayClear(tarr2);",
              "        tstr2=tstr1+'.CustomPropsGtl';",
              "        if(CT(tstr2) != 'No' && CT(tstr1+'.SetCustomProps') != 'No'){",
              "            for(j = 0;j < CT(tstr1+'.SetCustomProps' + '.Count');j = j +1) {",
              "                for(v = 0;v < CT(tstr2 + '.Count');v = v +1) {",
              "                    ArrayAdd(tarr2,CT(tstr2 + '.' + j + '.' + v));",
              "                }",
              "                ArrayAdd(temparray,1);",
              "                copy(temparray[j],tarr2);",
              "                ArrayClear(tarr2);",
              "            }",
              "            ArrayAdd(tarr1,1,'CustomPropsGtl');",
              "            copy(tarr1['CustomPropsGtl'],temparray);",
              "            ArrayClear(temparray);",
              "        }",
              "",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.WeaponType'),'WeaponType');",
              "        ArrayAdd(tarr1,CT(tstr1+'.WeaponName'),'WeaponName');",
              "",
              "        ArrayAdd(tarr1,CT(tstr1+'.SectorOpti'),'SectorOpti');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SectorFactor'),'SectorFactor');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SectorPlayerNead'),'SectorPlayerNead');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SectorPlayerNearby'),'SectorPlayerNearby');",
              "        ArrayAdd(tarr1,CT(tstr1+'.SectorVisibleOpti'),'SectorVisibleOpti');",
              "        ArrayAdd(tarr1,CT(tstr1+'.OnPlanetState'),'OnPlanetState');",
              "        ArrayAdd(shipsrules,1,i);",
              "        copy(shipsrules[i],tarr1);",
              "        ArrayClear(temparray);",
              "        ArrayClear(tarr1);",
              "    }",
              "}",
              "function PlanetSpawnRuleAll (int i) {",
              "    //SFT('CATGUNS-SPAWNER-ENTRYPOINT-PL-ALL-1');",
              "    while(tint4 < tint3 && it <= 3){",
              "        //SFT('CATGUNS-SPAWNER-ENTRYPOINT-PL-ALL-2');",
              "        it = it+1;",
              "        if(tint4 >= tint3) break;",
              "        //SFT('CATGUNS-SPAWNER-ENTRYPOINT-PL-ALL-3');",
              "        //Перебор систем",
              "        for(k = 0; k < GalaxyStars(); k = k + 1)",
              "        {",
              "            if(tint4 >= tint3) break;",
              "            if(StarCustomFaction(GalaxyStar(k)) != '') continue;",
              "            if((spawnrules[i,'ChanceToSpawn']) <= Rnd(1,100)) continue;",
              "            //SFT('CATGUNS-SPAWNER-POINT-SPAWNITEM IN'+Name(GalaxyStar(k)));",
              "            //Проверка на макс число",
              "            if(StarOwner(GalaxyStar(k))!=1){",
              "                //SFT('CATGUNS-SPAWNER-POINT-SPAWNITEM1 IN'+Name(GalaxyStar(k)));",
              "                //Перебор планет",
              "                for(a = 0; a < StarPlanets(GalaxyStar(k)); a = a + 1)",
              "                {",
              "",
              "                    if(tint4 >= tint3) break;",
              "                    if(spawnrules[i,'ChanceToSpawnPerPl'] <= Rnd(1,100)) continue;",
              "                    place = StarPlanets(GalaxyStar(k), a);",
              "                    //SFT('CATGUNS-SPAWNER-POINT-SPAWNITEM IN'+Name(place));",
              "",
              "                    if(PlanetOwner(place) == None) {",
              "                        continue;",
              "                    }",
              "                    else if(PlanetOwner(place) == Kling) {",
              "                        continue;",
              "                    }",
              "                    else {",
              "                        //SFT('CATGUNS-SPAWNER-POINT-SPAWNITEM');",
              "                        SpawnItem(i,place);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "function PlanetSpawnRuleCoalitionOnly (int i) {",
              "    //SFT('CATGUNS-SPAWNER-ENTRYPOINT-PL-CO-1');",
              "    while(tint4 < tint3 && it <= 3){",
              "        //SFT('CATGUNS-SPAWNER-ENTRYPOINT-PL-CO-2');",
              "        it = it+1;",
              "        if(tint4 >= tint3) break;",
              "        //SFT('CATGUNS-SPAWNER-ENTRYPOINT-PL-CO-3');",
              "        for(k = 0; k < GalaxyStars(); k = k + 1)",
              "        {",
              "            if(tint4 >= tint3) break;",
              "            if(StarCustomFaction(GalaxyStar(k)) != '') continue;",
              "            if(spawnrules[i,'ChanceToSpawn'] <= Rnd(1,100)) continue;",
              "            //SFT('CATGUNS-SPAWNER-POINT-SPAWNITEM IN'+Name(GalaxyStar(k)));",
              "            if(StarOwner(GalaxyStar(k))==0){",
              "                //SFT('CATGUNS-SPAWNER-POINT-SPAWNITEM1 IN'+Name(GalaxyStar(k)));",
              "                for(a = 0; a < StarPlanets(GalaxyStar(k)); a = a + 1)",
              "                {",
              "",
              "                    if(tint4 >= tint3) break;",
              "                    if(spawnrules[i,'ChanceToSpawnPerPl'] <= Rnd(1,100)) continue;",
              "                    place = StarPlanets(GalaxyStar(k), a);",
              "                    //SFT('CATGUNS-SPAWNER-POINT-SPAWNITEM IN PL'+Name(place));",
              "                    if(PlanetOwner(place) == None) {",
              "                        continue;",
              "                    }",
              "                    else if(PlanetOwner(place) == Kling) {",
              "                        continue;",
              "                    }",
              "                    else if(PlanetOwner(place) == PirateClan) {",
              "                        continue;",
              "                    }",
              "                    else {",
              "                        SpawnItem(i,place);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "function PlanetSpawnRulePirateOnly (int i) {",
              "    while(tint4 < tint3 && it <= 3){",
              "        it = it+1;",
              "        if(tint4 >= tint3) break;",
              "        for(k = 0; k < GalaxyStars(); k = k + 1)",
              "        {",
              "            if(tint4 >= tint3) break;",
              "            if(StarCustomFaction(GalaxyStar(k)) != '') continue;",
              "            if(spawnrules[i,'ChanceToSpawn'] <= Rnd(1,100)) continue;",
              "            if(StarOwner(GalaxyStar(k))==2){",
              "                for(a = 0; a < StarPlanets(GalaxyStar(k)); a = a + 1)",
              "                {",
              "                    if(tint4 >= tint3) break;",
              "                    if(spawnrules[i,'ChanceToSpawnPerPl'] <= Rnd(1,100)) continue;",
              "                    place = StarPlanets(GalaxyStar(k), a);",
              "                    if(PlanetOwner(place) != PirateClan) {",
              "                        continue;",
              "                    }",
              "                    else {",
              "                        SpawnItem(i,place);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "function PlanetSpawnRuleCustom (int i) {",
              "    while(tint4 < tint3 && it <= 3){",
              "        it = it+1;",
              "        if(tint4 >= tint3) break;",
              "        for(k = 0; k < GalaxyStars(); k = k + 1)",
              "        {",
              "            //SFT('CATGUNS-SPAWNER-POINT-SPAWNITEMCUS IN'+Name(GalaxyStar(k)));",
              "            if(tint4 >= tint3) break;",
              "            if(StarCustomFaction(GalaxyStar(k)) != '') continue;",
              "            if(spawnrules[i,'ChanceToSpawn'] <= Rnd(1,100)) continue;",
              "            for(a = 0; a < StarPlanets(GalaxyStar(k)); a = a + 1)",
              "            {",
              "                if(tint4 >= tint3) break;",
              "                if(spawnrules[i,'ChanceToSpawnPerPl'] <= Rnd(1,100)) continue;",
              "                place = StarPlanets(GalaxyStar(k), a);",
              "                //SFT(spawnrules[i,'PlanetRuleCount']);",
              "                //SFT(spawnrules[i,'PlanetRule']);",
              "                for(b = 1; b <= spawnrules[i,'PlanetRuleCount']; b = b + 1){",
              "                    if(PlanetOwner(place) != spawnrules[i,'PlanetRule',b]) {",
              "                        continue;",
              "                    }",
              "                    else {",
              "                        SpawnItem(i,place);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "function StationSpawnRuleAll (int i) {",
              "    while(tint4 < tint3 && it <= 3){",
              "        it = it+1;",
              "        if(tint4 >= tint3) break;",
              "        for(k = 0; k < GalaxyStars(); k = k + 1)",
              "        {",
              "            if(tint4 >= tint3) break;",
              "            if(int(spawnrules[i,'ChanceToSpawn']) < Rnd(1,100)) continue;",
              "            if(StarOwner(GalaxyStar(k))!=1){",
              "                for(a = 0; a < StarRuins(GalaxyStar(k)); a = a + 1)",
              "                {",
              "                    if(tint4 >= tint3) break;",
              "                    if(int(spawnrules[i,'ChanceToSpawnPerSt']) < Rnd(1,100)) continue;",
              "                    place = StarRuins(GalaxyStar(k), a);",
              "                    if(ShipType(place) == 'Inhibitor') {",
              "                        continue;",
              "                    }",
              "                    else if(ShipType(place) == 'KB') {",
              "                        continue;",
              "                    }",
              "                    else if(ShipType(place) == 'Machpella') {",
              "                        continue;",
              "                    }",
              "                    else if(ShipType(place) == 'Handler') {",
              "                        continue;",
              "                    }",
              "                    else if(ShipType(place) == 'AMod_InvadersRuin') {",
              "                        continue;",
              "                    }",
              "                    else {",
              "                        SpawnItem(i,place);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "function StationSpawnRuleCustom (int i) {",
              "    while(tint4 < tint3 && it <= 3){",
              "        it = it+1;",
              "        if(tint4 >= tint3) break;",
              "        for(k = 0; k < GalaxyStars(); k = k + 1)",
              "        {",
              "            if(tint4 >= tint3) break;",
              "            if(int(spawnrules[i,'ChanceToSpawn']) < Rnd(1,100)) continue;",
              "            for(a = 0; a < StarRuins(GalaxyStar(k)); a = a + 1)",
              "            {",
              "                if(tint4 >= tint3) break;",
              "                if(int(spawnrules[i,'ChanceToSpawnPerSt']) < Rnd(1,100)) continue;",
              "                place = StarRuins(GalaxyStar(k), a);",
              "                for(b = 1; b <= spawnrules[i,'StationRuleCount']; b = b + 1){",
              "                    if(ShipType(place) != spawnrules[i,'StationRule',b]) {",
              "                        continue;",
              "                    }",
              "                    else {",
              "                        SpawnItem(i,place);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "function ToStationRuleAll (int i) {",
              "    while(tint4 < tint3 && it <= 3){",
              "        it = it+1;",
              "        if(tint4 >= tint3) continue;",
              "        for(k = 0; k < GalaxyStars(); k = k + 1)",
              "        {",
              "            if(tint4 >= tint3) break;",
              "            if(StarRuins(GalaxyStar(k)) == 0) continue;",
              "            if(int(stationrules[i,'ChanceToSpawn']) < Rnd(1,100)) continue;",
              "",
              "            if(StarOwner(GalaxyStar(k))!=1){",
              "                for(a = 0; a < StarRuins(GalaxyStar(k)); a = a + 1)",
              "                {",
              "                    if(tint4 >= tint3) break;",
              "                    if(stationrules[i,'ChanceToSpawnPerSt'] < Rnd(1,100)) continue;",
              "                    place = StarRuins(GalaxyStar(k), a);",
              "                    if(ShipType(place) == 'Inhibitor') {",
              "                        continue;",
              "                    }",
              "                    else if(ShipType(place) == 'KB') {",
              "                        continue;",
              "                    }",
              "                    else if(ShipType(place) == 'Machpella') {",
              "                        continue;",
              "                    }",
              "                    else if(ShipType(place) == 'Handler') {",
              "                        continue;",
              "                    }",
              "                    else if(ShipType(place) == 'AMod_InvadersRuin') {",
              "                        continue;",
              "                    }",
              "                    else {",
              "                        tint4=tint4+1;",
              "                        tint1 = Rnd(stationrules[i,'MinGuns'],stationrules[i,'MaxGuns']);",
              "                        //Проверка не превышает ли кол-во пушек которые хотим поставить кол-во слотов на станции/корабле",
              "                        if(tint1 > ShipSlots(place,1)){",
              "                            tint1 = ShipSlots(place,1);",
              "                        }",
              "                        ArrayClear(tarr1);",
              "                        tint2=Rnd(1,tint1);",
              "                        //Временная переменная с номером слота",
              "                        v=1;",
              "                        //Безвыходный цикл который перебирает и ищет свободный слот который ещё не занят другой такой-же пушкой",
              "                        //Также в этом же цыкле спавнит",
              "                        while(v <= tint1){",
              "                            if(ArrayFind(tarr1,tint2) != -1){",
              "                                tint2=Rnd(1,tint1);",
              "                            }",
              "                            else {",
              "                                v = v+1;",
              "                                SpawnItemStation(i,place,tint2);",
              "                                ArrayAdd(tarr1,tint2);",
              "                            }",
              "                        }",
              "                        ArrayClear(tarr1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "function ToStationRuleCustom (int i) {",
              "    while(tint4 < tint3 && it <= 3){",
              "        it = it+1;",
              "        if(tint4 >= tint3) break;",
              "        for(k = 0; k < GalaxyStars(); k = k + 1)",
              "        {",
              "            if(tint4 >= tint3) break;",
              "            if(StarRuins(GalaxyStar(k)) == 0) continue;",
              "            if(int(stationrules[i,'ChanceToSpawn']) < Rnd(1,100)) continue;",
              "            for(a = 0; a < StarRuins(GalaxyStar(k)); a = a + 1)",
              "            {",
              "",
              "                if(tint4 >= tint3) break;",
              "                if(stationrules[i,'ChanceToSpawnPerSt'] < Rnd(1,100)) continue;",
              "                place = StarRuins(GalaxyStar(k), a);",
              "                for(b = 1; b <= stationrules[i,'StationRuleCount']; b = b + 1){",
              "                    if(ShipType(place) != stationrules[i,'StationRule',b]) {",
              "                        continue;",
              "                    }",
              "                    else {",
              "                        //SFT('CATGUNS-SPAWNER-ST-SPAWNZZZ- '+Name(place));",
              "                        tint4=tint4+1;",
              "                        tint1 = Rnd(stationrules[i,'MinGuns'],stationrules[i,'MaxGuns']);",
              "                        //Проверка не превышает ли кол-во пушек которые хотим поставить кол-во слотов на станции/корабле",
              "                        if(tint1 > ShipSlots(place,1)){",
              "                            tint1 = ShipSlots(place,1);",
              "                        }",
              "                        ArrayClear(tarr1);",
              "                        tint2=Rnd(1,tint1);",
              "                        //Временная переменная с номером слота",
              "                        v=1;",
              "                        //Безвыходный цикл который перебирает и ищет свободный слот который ещё не занят другой такой-же пушкой",
              "                        //Также в этом же цыкле спавнит",
              "                        while(v <= tint1){",
              "                            if(ArrayFind(tarr1,tint2) != -1){",
              "                                tint2=Rnd(1,tint1);",
              "                            }",
              "                            else {",
              "                                v = v+1;",
              "                                SpawnItemStation(i,place,tint2);",
              "                                ArrayAdd(tarr1,tint2);",
              "                            }",
              "                        }",
              "                        ArrayClear(tarr1);",
              "                    }",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "function ToShipsRule (int i) {",
              "    while(tint4 < tint3 && it < 1){",
              "        it = it+1;",
              "        if(tint4 >= tint3) continue;",
              "        ArrayClear(tarr1);",
              "        tarr1=BuildListOfNewShips(tarr1,Id(Player()),0,0,1);",
              "        for(k = 1; k < ArrayDim(); k = k + 1)",
              "        {",
              "            if(int(shipsrules[i,'ChanceToSpawnPerShip']) < Rnd(1,100)) continue;",
              "            place = tarr1[k];",
              "            if(ShipType(place) != shipsrules[i,'ShipsType']) continue;",
              "            if(ShipSubType(place) != shipsrules[i,'ShipsSubType']) continue;",
              "            if(ItemSize(ShipItems(place,0)) < shipsrules[i,'ShipsMinSize']) continue;",
              "            if(shipsrules[i,'OnPlanetState'] == 1) {",
              "                if(GetShipPlanet(place) == 0) continue;",
              "            }",
              "            tint1 = Rnd(shipsrules[i,'MinGuns'],shipsrules[i,'MaxGuns']);",
              "            tint4=tint4+1;",
              "            //Проверка не превышает ли кол-во пушек которые хотим поставить кол-во слотов на станции/корабле",
              "            if(tint1 > ShipSlots(place,1)){",
              "                tint1 = ShipSlots(place,1);",
              "            }",
              "            ArrayClear(temparray);",
              "            tint2=Rnd(1,tint1);",
              "            //Временная переменная с номером слота",
              "            v=1;",
              "            //Безвыходный цикл который перебирает и ищет свободный слот который ещё не занят другой такой-же пушкой",
              "            //Также в этом же цыкле спавнит",
              "            while(v <= tint1){",
              "                if(ArrayFind(temparray,tint2) != -1){",
              "                    tint2=Rnd(1,tint1);",
              "                }",
              "                else {",
              "                    v = v+1;",
              "                    SpawnItemShip(i,place,tint2);",
              "                    ArrayAdd(temparray,tint2);",
              "                }",
              "            }",
              "            ArrayClear(temparray);",
              "            ArrayClear(tarr1);",
              "        }",
              "    }",
              "}",
              "function ToShipsOptiRule(int i) {",
              "    //SFT('CATGUNS START OPTI SHIPS RULE');",
              "    while(tint4 < tint3 && it < 1)",
              "    {",
              "        //SFT('CATGUNS START OPTI SHIPS RULE POINT-1');",
              "        //SFT(shipsrules[i]);",
              "        //tarr1 - Записываем временно сюда все сектора которые выбрали",
              "        ArrayClear(tarr1);",
              "        if(shipsrules[i,'SectorPlayerNead'] == 1){",
              "            //tdwd2 - Записываем если вдруг понадобится в будущем использовать ссылку на сектор",
              "            tdwd2=StarToCon(ShipStar(Player()));",
              "            ArrayAdd(tarr1,StarToCon(ShipStar(Player())));",
              "        }",
              "        else {",
              "            //tint1 - Записываем результат рандома",
              "            tint1=Rnd(1,GalaxySectors()-1);",
              "            //tdwd2 - Записываем если вдруг понадобится в будущем использовать ссылку на сектор",
              "            tdwd2=GalaxySectors(tint1);",
              "            ArrayAdd(tarr1,GalaxySectors(tint1));",
              "        }",
              "        //SFT('CATGUNS START OPTI SHIPS RULE POINT-2');",
              "        k=1;",
              "        tdwd3=GalaxySectors(Rnd(1,GalaxySectors()-1));",
              "        //Цикл который крутится пока не найдёт подходящий по всем условиям сектор",
              "",
              "        ilp = 0;",
              "        while(k <= shipsrules[i,'SectorFactor'] && ilp < 3)",
              "        {",
              "            ilp = ilp + 1;",
              "            if(ArrayFind(tarr1,tdwd3) != -1)",
              "            {",
              "                tdwd3=GalaxySectors(Rnd(1,GalaxySectors()-1));",
              "            }",
              "            else",
              "            {",
              "                //Проверка если в ланге указано нужно ли чекать открытость игроком сектора,если она есть то чекаем открыт ли сектор",
              "                if(shipsrules[i,'SectorVisibleOpti'] == 1 && SectorVisible(GalaxySectors(v)) == 0) {",
              "                    tdwd3=GalaxySectors(Rnd(1,GalaxySectors()-1));",
              "                    continue;",
              "                }",
              "                //Проверка есть ли проверка на смежность с основным сектором  если есть проверка на смежность",
              "                if(shipsrules[i,'SectorPlayerNearby'] == 1)",
              "                {",
              "                    if(ConNear(tdwd2,tdwd3))",
              "                    {",
              "                        k=k+1;",
              "                        ArrayAdd(tarr1,tdwd3);",
              "                    }",
              "                    else",
              "                    {",
              "                        tdwd3=GalaxySectors(Rnd(1,GalaxySectors()-1));",
              "                    }",
              "                }",
              "                else",
              "                {",
              "                    k=k+1;",
              "                    ArrayAdd(tarr1,tdwd3);",
              "                }",
              "            }",
              "        }",
              "        //SFT('CATGUNS START OPTI SHIPS RULE POINT-3');",
              "        it = it+1;",
              "        ArrayClear(temparray);",
              "        //Формирование массива кораблей из самих звёзд которые формируются из секторов которые получились выше",
              "        for(k = 1;k < ArrayDim(tarr1);k = k + 1) {",
              "            //SFT('CATGUNS START OPTI SHIPS RULE POINT-ALFA - '+k);",
              "            //SFT(Name(tarr1[k]));",
              "            for(v = 1;v < ConStars(tarr1[k]);v = v + 1) {",
              "                //SFT('CATGUNS START OPTI SHIPS RULE BETA - '+v);",
              "                if(tint4 >= tint3) break;",
              "                //SFT('CATGUNS START OPTI SHIPS RULE BETA1- '+v);",
              "                //SFT(shipsrules[i,'ChanceToSpawn'] );",
              "                if(int(shipsrules[i,'ChanceToSpawn']) < Rnd(1,100)) continue;",
              "                //SFT('CATGUNS START OPTI SHIPS RULE BETA2- '+v);",
              "                //SFT(Name(ConStar(tarr1[k],v)));",
              "                for(a = 1;a < StarShips(ConStar(tarr1[k],v));a = a + 1) {",
              "                    //SFT('CATGUNS START OPTI SHIPS RULE GAMMA -PRE- '+v);",
              "                    if(int(shipsrules[i,'ChanceToSpawnPerShip']) < Rnd(1,100)) continue;",
              "                    //SFT('CATGUNS START OPTI SHIPS RULE GAMMA-START - '+v);",
              "                    place = StarShips(ConStar(tarr1[k],v),a);",
              "                    //SFT('CATGUNS START OPTI SHIPS RULE GAMMA-S - '+v);",
              "                    if(ShipType(place) != shipsrules[i,'ShipsType']) continue;",
              "                    //SFT('- CATGUNS START OPTI SHIPS RULE GAMMA0 - '+v);",
              "                    //SFT(ShipSubType(place));",
              "                    if(ShipSubType(place) != shipsrules[i,'ShipsSubType']) continue;",
              "                    //SFT('CATGUNS START OPTI SHIPS RULE GAMMA1 - '+v);",
              "                    if(ItemSize(ShipItems(place,0)) < shipsrules[i,'ShipsMinSize']) continue;",
              "                    //SFT('CATGUNS START OPTI SHIPS RULE GAMMA2 - '+v);",
              "                    //if(shipsrules[i,'OnPlanetState'] == 1) {",
              "                        //if(GetShipPlanet(place) == 0) continue;",
              "                    //}",
              "                    //SFT('CATGUNS START OPTI SHIPS RULE GAMMA3 - '+v);",
              "                    tint1 = Rnd(shipsrules[i,'MinGuns'],shipsrules[i,'MaxGuns']);",
              "                    tint4=tint4+1;",
              "                    //Проверка не превышает ли кол-во пушек которые хотим поставить кол-во слотов на станции/корабле",
              "                    if(tint1 > ShipSlots(place,1)){",
              "                        tint1 = ShipSlots(place,1);",
              "                    }",
              "                    //SFT('CATGUNS START OPTI SHIPS RULE GAMMA4 - '+v);",
              "                    ArrayClear(temparray);",
              "                    tint2=Rnd(1,tint1);",
              "                    //Временная переменная с номером слота",
              "                    b=1;",
              "                    //Безвыходный цикл который перебирает и ищет свободный слот который ещё не занят другой такой-же пушкой",
              "                    //Также в этом же цыкле спавнит",
              "                    while(b <= tint1){",
              "                        if(ArrayFind(temparray,tint2) != -1){",
              "                            tint2=Rnd(1,tint1);",
              "                        }",
              "                        else {",
              "                            //SFT('CATGUNS START OPTI SHIPS RULE GAMMASPAWN - '+v);",
              "                            b = b+1;",
              "                            SpawnItemShip(i,place,tint2);",
              "                            ArrayAdd(temparray,tint2);",
              "                        }",
              "                    }",
              "                    ArrayClear(temparray);",
              "                }",
              "            }",
              "        }",
              "        ArrayClear(tarr1);",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  360,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  8,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Code котором идёт вызов функций отвечающих за работу и спавн пушек",
              "if(countermin <= CurTurn()) {",
              "    countermin = CurTurn()+25;",
              "    //Спавнер по магазинам",
              "    for(i = 1;i <= CT('Items.Weapon.CustomWeapon.SpawnRules.Count');i = i +1){",
              "        //Проверка на ТУ",
              "        if(GalaxyTechLevel() < spawnrules[i,'GTL']) continue;",
              "        if(spawnrules[i,'GTLRem'] != 'No') {",
              "            if(GalaxyTechLevel() >= spawnrules[i,'GTLRem']) continue;",
              "        }",
              "        if(counterguns[i] <= CurTurn()){",
              "            //Записывает тип спавна",
              "            //Заводим таймер до следующего спавна",
              "            //SFT('CATGUNS-SPAWNER-ENTRYPOINT-TYPE'+i);",
              "            //SFT('CATGUNS-SPAWNER-ENTRYPOINT');",
              "            if(spawnrules[i,'CustomRepeatGtl'] == 'No'){",
              "                counterguns[i]=CurTurn() + Rnd(spawnrules[i,'MinCountRepeat'],spawnrules[i,'MaxCountRepeat']);",
              "            }",
              "            else {",
              "                if(spawnrules[i,'GTLRule'] != 'No') {",
              "                    tstr4 = spawnrules[i,'GTLRule'];",
              "                    tint1= gtlstates[tstr4];",
              "                }",
              "                else {",
              "                    tint1=GalaxyTechLevel();",
              "                }",
              "                tint2=round(Rnd(spawnrules[i,'MinCountRepeat'],spawnrules[i,'MaxCountRepeat'])/100);",
              "                counterguns[i]=CurTurn() + round(spawnrules[i,'CustomRepeatGtl',tint1] * tint2);",
              "            }",
              "            //SFT('CATGUNS-SPAWNER-ENTRYPOINT-2');",
              "            //SFT('CATGUNS-SPAWNER-ENTRYPOINT-TYPESPAWN'+spawnrules[i,'SpawnType']);",
              "            it = 0;",
              "            tint4=0;",
              "            if(tint1==1) {",
              "                tint3=round(Rnd(spawnrules[i,'SpawnCountMin'],spawnrules[i,'SpawnCountMax'])/2);",
              "            } else {",
              "                tint3=Rnd(spawnrules[i,'SpawnCountMin'],spawnrules[i,'SpawnCountMax']);",
              "            }",
              "",
              "            //P",
              "            tint1 = int(spawnrules[i,'SpawnType']);",
              "            if(tint1==1 || tint1==3){",
              "                if(spawnrules[i,'PlanetRule'] == 'All'){",
              "                    PlanetSpawnRuleAll(i);",
              "                }",
              "                else if(spawnrules[i,'PlanetRule'] == 'CoalitionOnly'){",
              "                    PlanetSpawnRuleCoalitionOnly(i);",
              "                }",
              "                else if(spawnrules[i,'PlanetRule'] == 'PirateOnly'){",
              "                    PlanetSpawnRulePirateOnly(i);",
              "                }",
              "                else {",
              "                    PlanetSpawnRuleCustom(i);",
              "                }",
              "",
              "            }",
              "            tint1 = int(spawnrules[i,'SpawnType']);",
              "            if(tint1==1) {",
              "                it = 0;",
              "                tint4=0;",
              "                tint3=round(Rnd(spawnrules[i,'SpawnCountMin'],spawnrules[i,'SpawnCountMax'])/2);",
              "            } else {",
              "                tint3=Rnd(spawnrules[i,'SpawnCountMin'],spawnrules[i,'SpawnCountMax']);",
              "            }",
              "            //S",
              "            if(tint1==1 || tint1==2){",
              "                if(spawnrules[i,'StationRule'] == 'All'){",
              "                    StationSpawnRuleAll(i);",
              "                }",
              "                else {",
              "                    StationSpawnRuleCustom(i);",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "if(countermingtl <= CurTurn()) {",
              "    countermingtl = CurTurn()+45;",
              "    //Просто аппер для гту",
              "    for(i = 1;i <= CT('Items.Weapon.CustomWeapon.GTLRulesArrow.Count');i = i + 1){",
              "        if(countergtl[i] <= CurTurn()){",
              "            //Заводим новый таймер до следуещей проверки на ап ту",
              "            tstr2=gtlrulesar[i];",
              "            if(ArrayFind(gtlstatesc,tstr2)== -1){",
              "                ArrayAdd(gtlstates,1,tstr2);",
              "                ArrayAdd(gtlstatesc,tstr2);",
              "            }",
              "            if(gtlstates[tstr2] >= 8) {",
              "                gtlstates[tstr2]=8;",
              "                continue;",
              "            }",
              "            if(GalaxyTechLevel() >= gtlrules[tstr2,'TechLevel']){",
              "                tint1 = gtlrules[tstr2,'UpCoof']*gtlstates[tstr2];",
              "                tint2 = GalaxyDiffLevels(1)/100;",
              "                tint2 = round(tint2*gtlrules[tstr2,'ModifyDifSc']);",
              "                tint5 = GalaxyDiffLevels(4)/100;",
              "                tint5 = round(tint5*gtlrules[tstr2,'ModifyDifEq']);",
              "                countergtl[i]=CurTurn() + Rnd(gtlrules[tstr2,'TurnUpMin'],gtlrules[tstr2,'TurnUpMax']) + tint1 + tint2 + tint5;",
              "                if(gtlstates[tstr2]<gtlrules[tstr2,'StartTL']){",
              "                    gtlstates[tstr2] = gtlrules[tstr2,'StartTL'];",
              "                }",
              "                else {",
              "                    gtlstates[tstr2] = gtlstates[tstr2] + 1;",
              "                }",
              "            }",
              "            else {",
              "                gtlstates[tstr2] = 1;",
              "            }",
              "        }",
              "    }",
              "}",
              "if(counterminst <= CurTurn()) {",
              "    counterminst = CurTurn()+43;",
              "    //Спавн на станциях",
              "    for(i = 1;i <= CT('Items.Weapon.CustomWeapon.StationRules.Count');i = i +1){",
              "        if(counterst[i] <= CurTurn()){",
              "            if(GalaxyTechLevel() < stationrules[i,'GTL']) continue;",
              "            if(stationrules[i,'GTLRem'] != 'No') {",
              "                if(GalaxyTechLevel() >= stationrules[i,'GTLRem']) continue;",
              "            }",
              "            if(counterst[i] <= CurTurn()){",
              "                //Записывает тип спавна",
              "                //Заводим таймер до следующего спавна",
              "                if(stationrules[i,'CustomRepeatGtl'] == 'No'){",
              "                    counterst[i]=CurTurn() + Rnd(stationrules[i,'MinCountRepeat'],stationrules[i,'MaxCountRepeat']);",
              "                }",
              "                else {",
              "                    if(stationrules[i,'GTLRule'] != 'No') {",
              "                        tstr4 = stationrules[i,'GTLRule'];",
              "                        tint1= gtlstates[tstr4];",
              "                    }",
              "                    else {",
              "                        tint1=GalaxyTechLevel();",
              "                    }",
              "                    tint2=round(Rnd(stationrules[i,'MinCountRepeat'],stationrules[i,'MaxCountRepeat'])/100);",
              "                    counterst[i]=CurTurn() + round(stationrules[i,'CustomRepeatGtl',tint1] * tint2);",
              "                }",
              "                it = 0;",
              "                tint4=0;",
              "                tint3=Rnd(stationrules[i,'SpawnCountMin'],stationrules[i,'SpawnCountMax']);",
              "                //P",
              "                if(stationrules[i,'StationRule'] == 'All'){",
              "                    ToStationRuleAll(i);",
              "                }",
              "                else {",
              "                    ToStationRuleCustom(i);",
              "                }",
              "            }",
              "        }",
              "    }",
              "}",
              "if(counterminsh <= CurTurn()) {",
              "    counterminsh = CurTurn()+49;",
              "    //Спавн на кораблях",
              "    for(i = 1;i <= CT('Items.Weapon.CustomWeapon.ShipsRules.Count');i = i +1){",
              "        if(countership[i] <= CurTurn()){",
              "            if(GalaxyTechLevel() < shipsrules[i,'GTL']) continue;",
              "            if(shipsrules[i,'GTLRem'] != 'No') {",
              "                if(GalaxyTechLevel() >= shipsrules[i,'GTLRem']) continue;",
              "            }",
              "",
              "            if(countership[i] <= CurTurn()){",
              "                //Записывает тип спавна",
              "                //Заводим таймер до следующего спавна",
              "",
              "                if(shipsrules[i,'CustomRepeatGtl'] == 'No'){",
              "                    countership[i]=CurTurn() + Rnd(shipsrules[i,'MinCountRepeat'],shipsrules[i,'MaxCountRepeat']);",
              "                }",
              "                else {",
              "                    if(shipsrules[i,'GTLRule'] != 'No') {",
              "                        tstr4 = shipsrules[i,'GTLRule'];",
              "                        tint1= gtlstates[tstr4];",
              "                    }",
              "                    else {",
              "                        tint1=GalaxyTechLevel();",
              "                    }",
              "                    tint2=round(Rnd(shipsrules[i,'MinCountRepeat'],shipsrules[i,'MaxCountRepeat'])/100);",
              "                    countership[i]=CurTurn() + round(shipsrules[i,'CustomRepeatGtl',tint1] * tint2);",
              "                }",
              "                it = 0;",
              "                tint4=0;",
              "                tint3=Rnd(shipsrules[i,'SpawnCountMin'],shipsrules[i,'SpawnCountMax']);",
              "                //P",
              "                if(shipsrules[i,'SectorOpti'] == 1){",
              "                    ToShipsOptiRule(i);",
              "                }",
              "                else {",
              "                    ToShipsRule(i);",
              "                }",
              "            }",
              "        }",
              "    }",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  380,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  14,
          "Code.Type":  "Turn",
          "Code":          
          [
              "//Автоматическое обновление характеристик кастомных орудий",
              "//Срабатывает, только если параметр StatsVersion для Cat_Guns был изменён",
              "if(gunUpdateCheck != CT('Items.Weapon.CustomWeapon.StatsVersion.Cat_Guns'))",
              "{",
              "    //SFT('UPDATE1');",
              "",
              "    InventNewGuns();",
              "    gunUpdateCheck = CT('Items.Weapon.CustomWeapon.StatsVersion.Cat_Guns');",
              "}",
              "if(UpdateSpawnRule != CT('Items.Weapon.CustomWeapon.GunsSpawnStatsVersion.Cat_Guns'))",
              "{",
              "    //SFT('UPDATE2');",
              "    countermin = CurTurn()+25;",
              "",
              "    UpdateSpawnRules();",
              "    UpdateSpawnRule = CT('Items.Weapon.CustomWeapon.GunsSpawnStatsVersion.Cat_Guns');",
              "}",
              "if(UpdateGTLRule != CT('Items.Weapon.CustomWeapon.GunsGTLStatsVersion.Cat_Guns'))",
              "{",
              "    //SFT('UPDATE3');",
              "    countermingtl = CurTurn()+15;",
              "",
              "    UpdateGTLRules();",
              "    UpdateGTLRule = CT('Items.Weapon.CustomWeapon.GunsGTLStatsVersion.Cat_Guns');",
              "}",
              "if(UpdateStationsRule != CT('Items.Weapon.CustomWeapon.GunsStationStatsVersion.Cat_Guns'))",
              "{",
              "    //SFT('UPDATE4');",
              "    counterminst = CurTurn()+34;",
              "    UpdateStationsRules();",
              "    UpdateStationsRule = CT('Items.Weapon.CustomWeapon.GunsStationStatsVersion.Cat_Guns');",
              "}",
              "if(UpdateShipsRule != CT('Items.Weapon.CustomWeapon.GunsShipsStatsVersion.Cat_Guns'))",
              "{",
              "    //SFT('UPDATE5');",
              "    counterminsh = CurTurn()+38;",
              "    UpdateShipsRules();",
              "    UpdateShipsRule = CT('Items.Weapon.CustomWeapon.GunsShipsStatsVersion.Cat_Guns');",
              "}"          
          ]        
        },
        {
          "Type":  "Top",
          "Name":  "",
          "Pos.x":  340,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  50,
          "Code.Type":  "Init",
          "Code":          
          [
              "function SpawnItem (int i,dword place) {",
              "    tint4=tint4+1;",
              "    //tint1 - GTL",
              "    //Определение ГТУ",
              "    tint1=0;",
              "    if(spawnrules[i,'GTLRule'] != 'No') {",
              "        tstr4 = spawnrules[i,'GTLRule'];",
              "        tint1= gtlstates[tstr4];",
              "    }",
              "    else {",
              "        tint1=GalaxyTechLevel();",
              "    }",
              "    if(Rnd(5,15)>Rnd(1,100)){",
              "        tint1=max(1,tint1-1);",
              "    }",
              "    //Определение рассы",
              "    if(int(spawnrules[i,'SpawnType'])==1 || int(spawnrules[i,'SpawnType'])==3){",
              "        if(ObjectType(place) == 3 && spawnrules[i,'RacePlId'] == 1){",
              "            //SFT('GGGGGG');",
              "            tdwd2= PlanetOwner(place);",
              "        }",
              "        else {",
              "            tdwd2= spawnrules[i,'Race',Rnd(1,spawnrules[i,'RaceCount'])];",
              "        }",
              "    }",
              "    else {",
              "        tdwd2= spawnrules[i,'Race',Rnd(1,spawnrules[i,'RaceCount'])];",
              "    }",
              "",
              "",
              "    //Само создание",
              "    if(spawnrules[i,'WeaponType'] == 0) {",
              "        item = CreateEquipment(",
              "            spawnrules[i,'WeaponName'],",
              "            Rnd(spawnrules[i,'SizeMin'],spawnrules[i,'SizeMax']),",
              "            tint4,",
              "            tdwd2",
              "        );",
              "    }",
              "    else {",
              "        item = CreateCustomWeapon(",
              "            spawnrules[i,'WeaponName'],",
              "            Rnd(spawnrules[i,'SizeMin'],spawnrules[i,'SizeMax']),",
              "            tint4,",
              "            tdwd2",
              "        );",
              "    }",
              "    if(tdwd2 == Kling){",
              "        ItemSubrace(spawnrules[i,'SubRace']);",
              "    }",
              "    ItemLevel(item,tint1);",
              "    //Акринация",
              "    if(spawnrules[i,'AcrynType']==1){",
              "        //SFT(FindBonusByNameInCfg(spawnrules[i,'AcrynInCfg']));",
              "        SpecialToEquipment(FindBonusByNameInCfg(spawnrules[i,'AcrynInCfg']), item);",
              "    }",
              "    if(spawnrules[i,'AcrynType']==2) {",
              "        SpecialToEquipment(FindBonusByNameInCfg(spawnrules[i,'AcrynInCfg',Rnd(1,spawnrules[i,'AcrynsCount'])]),item);",
              "    }",
              "    if(spawnrules[i,'AcrynType']==3){",
              "        //SFT(FindBonusByNameInCfg(spawnrules[i,'AcrynInCfg']+tint1));",
              "        SpecialToEquipment(FindBonusByNameInCfg(spawnrules[i,'AcrynInCfg']+tint1), item);",
              "    }",
              "    //Микромодуляция",
              "    if(spawnrules[i,'MMType']==1){",
              "        ModuleToEquipment(FindBonusByNameInCfg(spawnrules[i,'MMInCfg']), item);",
              "    }",
              "    if(spawnrules[i,'MMType']==2) {",
              "        ModuleToEquipment(FindBonusByNameInCfg(",
              "            spawnrules[i,'MMInCfg',Rnd(1,spawnrules[i,'MMCount'])]),",
              "            item",
              "        );",
              "    }",
              "    if(spawnrules[i,'MMType']==3){",
              "        ModuleToEquipment(FindBonusByNameInCfg(spawnrules[i,'MMInCfg']+tint1), item);",
              "    }",
              "    if(spawnrules[i,'SetCustomProps'] == 'No'){",
              "        //SFT('CATGUNS;DDDAS');",
              "    }",
              "    else {",
              "        for(p = 0;p < spawnrules[i,'SetCustomPropsCount'];p = p+1){",
              "            if(spawnrules[i,'CustomPropsGtl'] == 'No'){",
              "                SetEquipmentStats(item,spawnrules[i,'SetCustomProps',p+1],p);",
              "            }",
              "            else {",
              "                tint2=int(spawnrules[i,'SetCustomProps',p+1])/100;",
              "                tint5=tint2*int(spawnrules[i,'CustomPropsGtl',p,tint1]);",
              "                SetEquipmentStats(item,round(tint5),p);",
              "            }",
              "        }",
              "    }",
              "",
              "",
              "    if(spawnrules[i,'CanSell'] == 1 || spawnrules[i,'CanSell'] == 0 ||  spawnrules[i,'ActCode'] != 0 || spawnrules[i,'UseCode'] != 0) {",
              "        LinkItemToScript(item);",
              "        //SFT(spawnrules[i,'ActCode']);",
              "        //SFT(GenerateCodeStringFromBlock(spawnrules[i,'ActCode']));",
              "        if(spawnrules[i,'CanSell'] == 1 || spawnrules[i,'CanSell'] == 0 ){",
              "            CanSellItem(item,spawnrules[i,'CanSell']);",
              "        }",
              "        if(spawnrules[i,'ActCode'] != 0){",
              "            ItemOnActCode(item, GenerateCodeStringFromBlock(''+spawnrules[i,'ActCode']));",
              "        }",
              "        if(spawnrules[i,'UseCode'] != 0){",
              "            ItemOnUseCode(item, GenerateCodeStringFromBlock(''+spawnrules[i,'UseCode']));",
              "        }",
              "    }",
              "    ItemCost(item,int(ItemCost(item)/100)*spawnrules[i,'kCost']);",
              "    if(spawnrules[i,'CustomRace'] != 'No') {",
              "        if(Rnd(1,100) <= spawnrules[i,'CustomRaceChance']) {",
              "            EqCustomFaction(item,spawnrules[i,'CustomRace']);",
              "        }",
              "    }",
              "    if(spawnrules[i,'IName'] != 'No') {",
              "        SetName(item,spawnrules[i,'IName']);",
              "    }",
              "    if(spawnrules[i,'MissileUp'] == 1){",
              "        MissilesToRearm(item,MissilesToRearm(item));",
              "    }",
              "    AddItemToShop(place,item);",
              "",
              "}",
              "function SpawnItemStation (int i,dword station,int slot) {",
              "    //tint1 - GTL",
              "    //Определение ГТУ",
              "    tint4=tint4+1;",
              "    tint1=0;",
              "    if(stationrules[i,'GTLRule'] != 'No') {",
              "        tstr4 = stationrules[i,'GTLRule'];",
              "        tint1= gtlstates[tstr4];",
              "    }",
              "    else {",
              "        tint1=GalaxyTechLevel();",
              "    }",
              "    if(Rnd(5,15)>Rnd(1,100)){",
              "        tint1=max(1,tint1-1);",
              "    }",
              "    //SFT(tint1);",
              "    //Определение рассы",
              "    tdwd2= stationrules[i,'Race',Rnd(1,stationrules[i,'RaceCount'])];",
              "    //Само создание",
              "",
              "    if(stationrules[i,'WeaponName'] == 'bso') exit;",
              "    if(stationrules[i,'WeaponName'] == CT('Items.Weapon.Name.bso')) exit;",
              "",
              "    if(stationrules[i,'WeaponType'] == 0) {",
              "        item = CreateEquipment(",
              "            stationrules[i,'WeaponName'],",
              "            Rnd(stationrules[i,'SizeMin'],stationrules[i,'SizeMax']),",
              "            tint4,",
              "            tdwd2",
              "        );",
              "    }",
              "    else {",
              "        item = CreateCustomWeapon(",
              "            stationrules[i,'WeaponName'],",
              "            Rnd(stationrules[i,'SizeMin'],stationrules[i,'SizeMax']),",
              "            tint4,",
              "            tdwd2",
              "        );",
              "    }",
              "    if(tdwd2 == Kling){",
              "        ItemSubrace(stationrules[i,'SubRace']);",
              "    }",
              "    ItemLevel(item,tint1);",
              "    //Акринация",
              "    if(stationrules[i,'AcrynType']==1){",
              "        SpecialToEquipment(FindBonusByNameInCfg(stationrules[i,'AcrynInCfg']), item);",
              "    }",
              "    if(stationrules[i,'AcrynType']==2) {",
              "        SpecialToEquipment(FindBonusByNameInCfg(",
              "            stationrules[i,'AcrynInCfg',Rnd(1,stationrules[i,'AcrynsCount'])]),",
              "            item",
              "        );",
              "    }",
              "    if(stationrules[i,'AcrynType']==3){",
              "        SpecialToEquipment(FindBonusByNameInCfg(stationrules[i,'AcrynInCfg']+tint1), item);",
              "    }",
              "    //Микромодуляция",
              "    if(stationrules[i,'MMType']==1){",
              "        ModuleToEquipment(FindBonusByNameInCfg(stationrules[i,'MMInCfg']), item);",
              "    }",
              "    if(stationrules[i,'MMType']==2) {",
              "        ModuleToEquipment(FindBonusByNameInCfg(",
              "            stationrules[i,'MMInCfg',Rnd(1,stationrules[i,'MMCount'])]),",
              "            item",
              "        );",
              "    }",
              "    if(stationrules[i,'MMType']==3){",
              "        ModuleToEquipment(FindBonusByNameInCfg(stationrules[i,'MMInCfg']+tint1), item);",
              "    }",
              "",
              "    if(stationrules[i,'SetCustomProps'] == 'No'){",
              "        //SFT('CATGUNS;DDDAS');",
              "    }",
              "    else {",
              "        for(p = 0;p < stationrules[i,'SetCustomPropsCount'];p = p+1){",
              "            if(stationrules[i,'CustomPropsGtl'] == 'No'){",
              "                SetEquipmentStats(item,stationrules[i,'SetCustomProps',p+1],p);",
              "            }",
              "            else {",
              "                tint2=int(stationrules[i,'SetCustomProps',p+1])/100;",
              "                tint5=tint2*int(stationrules[i,'CustomPropsGtl',p,tint1]);",
              "                SetEquipmentStats(item,round(tint5),p);",
              "            }",
              "        }",
              "    }",
              "",
              "    //АктКоды продажа и тд",
              "    if(stationrules[i,'CanSell'] == 1 || stationrules[i,'CanSell'] == 0 ||  stationrules[i,'ActCode'] != 0 || stationrules[i,'UseCode'] != 0) {",
              "        LinkItemToScript(item);",
              "        if(stationrules[i,'CanSell'] == 1 || stationrules[i,'CanSell'] == 0 ){",
              "            CanSellItem(item,stationrules[i,'CanSell']);",
              "        }",
              "        if(stationrules[i,'ActCode'] != 0){",
              "            ItemOnActCode(item, GenerateCodeStringFromBlock(stationrules[i,'ActCode']));",
              "            //SFT(stationrules[i,'ActCode']);",
              "        }",
              "        if(stationrules[i,'UseCode'] != 0){",
              "            //SFT(stationrules[i,'UseCode']);",
              "            ItemOnUseCode(item, GenerateCodeStringFromBlock(stationrules[i,'UseCode']));",
              "        }",
              "    }",
              "    //Цена",
              "    ItemCost(item,int(ItemCost(item)/100)*stationrules[i,'kCost']);",
              "    if(stationrules[i,'CustomRace'] != 'No') {",
              "        if(Rnd(1,100) <= stationrules[i,'CustomRaceChance']) {",
              "            EqCustomFaction(item,stationrules[i,'CustomRace']);",
              "        }",
              "    }",
              "    if(stationrules[i,'IName'] != 'No') {",
              "        SetName(item,stationrules[i,'IName']);",
              "    }",
              "    if(stationrules[i,'MissileUp'] == 1){",
              "        MissilesToRearm(item,MissilesToRearm(item));",
              "    }",
              "    if(ShipEqInSlot(station,t_Weapon1,slot) == 0){",
              "        ItemIsInUse(item,station,1,slot);",
              "    }",
              "    else {",
              "        tdwd3= ShipEqInSlot(station,t_Weapon1,slot);",
              "        ItemIsInUse(tdwd3,station,0);",
              "        GetItemFromShip(station,tdwd3);",
              "        FreeItem(tdwd3);",
              "        AddItemToShip(station,item);",
              "        ItemIsInUse(item,station,1,slot);",
              "    }",
              "",
              "}",
              "function SpawnItemShip (int i,dword ship,int slot) {",
              "    //tint1 - GTL",
              "    //Определение ГТУ",
              "    tint4=tint4+1;",
              "    tint1=0;",
              "    if(shipsrules[i,'GTLRule'] != 'No') {",
              "        tstr4 = shipsrules[i,'GTLRule'];",
              "        tint1= gtlstates[tstr4];",
              "    }",
              "    else {",
              "        tint1=GalaxyTechLevel();",
              "    }",
              "    if(Rnd(5,15)>Rnd(1,100)){",
              "        tint1=max(1,tint1-1);",
              "    }",
              "    //Определение рассы",
              "    tdwd2= shipsrules[i,'Race',Rnd(1,shipsrules[i,'RaceCount'])];",
              "    //Само создание",
              "    if(shipsrules[i,'WeaponType'] == 0) {",
              "        item = CreateEquipment(",
              "            shipsrules[i,'WeaponName'],",
              "            Rnd(shipsrules[i,'SizeMin'],shipsrules[i,'SizeMax']),",
              "            tint4,",
              "            tdwd2",
              "        );",
              "    }",
              "    else {",
              "        item = CreateCustomWeapon(",
              "            shipsrules[i,'WeaponName'],",
              "            Rnd(shipsrules[i,'SizeMin'],shipsrules[i,'SizeMax']),",
              "            tint4,",
              "            tdwd2",
              "        );",
              "    }",
              "    if(tdwd2 == Kling){",
              "        ItemSubrace(shipsrules[i,'SubRace']);",
              "    }",
              "    ItemLevel(item,tint1);",
              "    //Акринация",
              "    if(shipsrules[i,'AcrynType']==1){",
              "        //SFT(FindBonusByNameInCfg(shipsrules[i,'AcrynInCfg']));",
              "        SpecialToEquipment(FindBonusByNameInCfg(shipsrules[i,'AcrynInCfg']), item);",
              "    }",
              "    if(shipsrules[i,'AcrynType']==2) {",
              "",
              "        //SFT(FindBonusByNameInCfg(shipsrules[i,'AcrynInCfg',Rnd(1,shipsrules[i,'AcrynsCount'])]));",
              "        SpecialToEquipment(",
              "            FindBonusByNameInCfg(shipsrules[i,'AcrynInCfg',Rnd(1,shipsrules[i,'AcrynsCount'])]),",
              "            item",
              "        );",
              "    }",
              "    if(shipsrules[i,'AcrynType']==3){",
              "        //SFT(FindBonusByNameInCfg(shipsrules[i,'AcrynInCfg']+tint1));",
              "        SpecialToEquipment(FindBonusByNameInCfg(shipsrules[i,'AcrynInCfg']+tint1), item);",
              "    }",
              "",
              "",
              "",
              "",
              "    //Микромодуляция",
              "    if(shipsrules[i,'MMType']==1){",
              "        ModuleToEquipment(FindBonusByNameInCfg(shipsrules[i,'MMInCfg']), item);",
              "    }",
              "    if(shipsrules[i,'MMType']==2) {",
              "        ModuleToEquipment(FindBonusByNameInCfg(",
              "            shipsrules[i,'MMInCfg',Rnd(1,shipsrules[i,'MMCount'])]),",
              "            item",
              "        );",
              "    }",
              "    if(shipsrules[i,'MMType']==3){",
              "        ModuleToEquipment(FindBonusByNameInCfg(shipsrules[i,'MMInCfg']+tint1), item);",
              "    }",
              "",
              "    if(shipsrules[i,'SetCustomProps'] == 'No'){",
              "        //SFT('CATGUNS;DDDAS');",
              "    }",
              "    else {",
              "        for(p = 0;p < shipsrules[i,'SetCustomPropsCount'];p = p+1){",
              "            if(shipsrules[i,'CustomPropsGtl'] == 'No'){",
              "                SetEquipmentStats(item,shipsrules[i,'SetCustomProps',p+1],p);",
              "            }",
              "            else {",
              "                tint2=int(shipsrules[i,'SetCustomProps',p+1])/100;",
              "                tint5=tint2*int(shipsrules[i,'CustomPropsGtl',p,tint1]);",
              "                SetEquipmentStats(item,round(tint5),p);",
              "            }",
              "        }",
              "    }",
              "",
              "    //АктКоды продажа и тд",
              "    if(shipsrules[i,'CanSell'] == 1 || shipsrules[i,'CanSell'] == 0 ||  shipsrules[i,'ActCode'] != 0 || shipsrules[i,'UseCode'] != 0) {",
              "        LinkItemToScript(item);",
              "        if(shipsrules[i,'CanSell'] == 1 || shipsrules[i,'CanSell'] == 0 ){",
              "            CanSellItem(item,shipsrules[i,'CanSell']);",
              "        }",
              "        if(shipsrules[i,'ActCode'] != 0){",
              "            ItemOnActCode(item, GenerateCodeStringFromBlock(''+shipsrules[i,'ActCode']));",
              "        }",
              "        if(shipsrules[i,'UseCode'] != 0){",
              "            ItemOnUseCode(item, GenerateCodeStringFromBlock(''+shipsrules[i,'UseCode']));",
              "        }",
              "    }",
              "    //Цена",
              "    ItemCost(item,int(ItemCost(item)/100)*shipsrules[i,'kCost']);",
              "    if(shipsrules[i,'CustomRace'] != 'No') {",
              "        if(Rnd(1,100) <= shipsrules[i,'CustomRaceChance']) {",
              "            EqCustomFaction(item,shipsrules[i,'CustomRace']);",
              "        }",
              "    }",
              "    if(shipsrules[i,'MissileUp'] == 1){",
              "        MissilesToRearm(item,MissilesToRearm(item));",
              "    }",
              "    if(shipsrules[i,'IName'] != 'No') {",
              "        SetName(item,shipsrules[i,'IName']);",
              "    }",
              "    if(ShipEqInSlot(ship,t_Weapon1,slot) == 0){",
              "        ItemIsInUse(item,ship,1,slot);",
              "    }",
              "    else {",
              "        tdwd3= ShipEqInSlot(ship,t_Weapon1,slot);",
              "        ItemIsInUse(tdwd3,ship,0);",
              "        GetItemFromShip(ship,tdwd3);",
              "        FreeItem(tdwd3);",
              "        AddItemToShip(ship,item);",
              "        ItemIsInUse(item,ship,1,slot);",
              "    }",
              "}"          
          ]        
        }      
      ],
      "Planets":      
      [
        {
          "Type":  "TPlanet",
          "Name":  "PlanetNew",
          "Pos.x":  220,
          "Pos.y":  370,
          "Parent":  -1,
          "#":  3,
          "Race":  62,
          "Owner":  62,
          "Economy":  14,
          "Goverment":  62,
          "RangeMin":  0,
          "RangeMax":  100,
          "Dialog":  -1        
        }      
      ],
      "Ships":      
      [
        {
          "Type":  "TStarShip",
          "Name":  "",
          "Pos.x":  220,
          "Pos.y":  330,
          "Parent":  -1,
          "#":  2,
          "Count":  1,
          "Owner":  62,
          "Ship.Type":  126,
          "Player":  true,
          "SpeedMin":  0,
          "SpeedMax":  10000,
          "Weapon":  0,
          "CargoHook":  0,
          "EmptySpace":  0,
          "StatusTraderMin":  0,
          "StatusTraderMax":  100,
          "StatusWarriorMin":  0,
          "StatusWarriorMax":  100,
          "StatusPirateMin":  0,
          "StatusPirateMax":  100,
          "StrengthMin":  "0",
          "StrengthMax":  "0",
          "Ruins":  ""        
        }      
      ],
      "Stars":      
      [
        {
          "Type":  "TStar",
          "Name":  "StarNew",
          "Pos.x":  220,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  4,
          "Constellation":  0,
          "Priority":  0,
          "NoKling":  false,
          "NoComeKling":  false        
        }      
      ],
      "Statements":      
      [
        {
          "Type":  "Tif",
          "Name":  "",
          "Pos.x":  360,
          "Pos.y":  350,
          "Parent":  -1,
          "#":  13,
          "Code.Type":  "Turn",
          "Code":          
          [
              "!ShipIsTakeoff(Player())"          
          ]        
        }      
      ],
      "States":      
      [
        {
          "Type":  "TState",
          "Name":  "StateNew",
          "Pos.x":  220,
          "Pos.y":  410,
          "Parent":  -1,
          "#":  0,
          "Move":  0,
          "MoveObj":  -1,
          "Attack.Count":  0,
          "TakeItem":  -1,
          "TakeAllItem":  false,
          "OnTalk":  "",
          "OnActCode":  "",
          "EType":  1,
          "EUnique":  "",
          "EMsg":  ""        
        }      
      ],
      "Variables":      
      [
        {
          "Type":  "TVar",
          "Name":  "tdwd",
          "Pos.x":  610,
          "Pos.y":  100,
          "Parent":  -1,
          "#":  6,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "gunUpdateCheck",
          "Pos.x":  290,
          "Pos.y":  -70,
          "Parent":  -1,
          "#":  9,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr2",
          "Pos.x":  670,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  10,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr1",
          "Pos.x":  670,
          "Pos.y":  100,
          "Parent":  -1,
          "#":  11,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "i",
          "Pos.x":  520,
          "Pos.y":  -190,
          "Parent":  -1,
          "#":  12,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint1",
          "Pos.x":  730,
          "Pos.y":  100,
          "Parent":  -1,
          "#":  15,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint2",
          "Pos.x":  730,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  16,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "place",
          "Pos.x":  200,
          "Pos.y":  -230,
          "Parent":  -1,
          "#":  17,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "j",
          "Pos.x":  520,
          "Pos.y":  -210,
          "Parent":  -1,
          "#":  18,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "k",
          "Pos.x":  520,
          "Pos.y":  -230,
          "Parent":  -1,
          "#":  19,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "item",
          "Pos.x":  200,
          "Pos.y":  -210,
          "Parent":  -1,
          "#":  20,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "counterguns",
          "Pos.x":  700,
          "Pos.y":  -50,
          "Parent":  -1,
          "#":  21,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tarr1",
          "Pos.x":  780,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  22,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr3",
          "Pos.x":  670,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  23,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "UpdateSpawnRule",
          "Pos.x":  290,
          "Pos.y":  -50,
          "Parent":  -1,
          "#":  24,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "UpdateStationsRule",
          "Pos.x":  290,
          "Pos.y":  -10,
          "Parent":  -1,
          "#":  25,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "UpdateGTLRule",
          "Pos.x":  290,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  26,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "spawnrules",
          "Pos.x":  530,
          "Pos.y":  -60,
          "Parent":  -1,
          "#":  27,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "gtlrules",
          "Pos.x":  860,
          "Pos.y":  0,
          "Parent":  -1,
          "#":  28,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "stationrules",
          "Pos.x":  530,
          "Pos.y":  -40,
          "Parent":  -1,
          "#":  29,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "temparray",
          "Pos.x":  780,
          "Pos.y":  100,
          "Parent":  -1,
          "#":  30,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "countermin",
          "Pos.x":  290,
          "Pos.y":  100,
          "Parent":  -1,
          "#":  31,
          "Var.Type":  "Int",
          "Init":  "70",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "counterst",
          "Pos.x":  700,
          "Pos.y":  -10,
          "Parent":  -1,
          "#":  32,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "countergtl",
          "Pos.x":  700,
          "Pos.y":  -30,
          "Parent":  -1,
          "#":  33,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "countership",
          "Pos.x":  700,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  34,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "UpdateShipsRule",
          "Pos.x":  290,
          "Pos.y":  10,
          "Parent":  -1,
          "#":  35,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "shipsrules",
          "Pos.x":  530,
          "Pos.y":  -20,
          "Parent":  -1,
          "#":  36,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "a",
          "Pos.x":  560,
          "Pos.y":  -230,
          "Parent":  -1,
          "#":  37,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "b",
          "Pos.x":  560,
          "Pos.y":  -210,
          "Parent":  -1,
          "#":  38,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint3",
          "Pos.x":  730,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  39,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint4",
          "Pos.x":  730,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  40,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr4",
          "Pos.x":  670,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  41,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "gtlstates",
          "Pos.x":  860,
          "Pos.y":  -60,
          "Parent":  -1,
          "#":  42,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "v",
          "Pos.x":  560,
          "Pos.y":  -190,
          "Parent":  -1,
          "#":  43,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tdwd2",
          "Pos.x":  610,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  44,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "gtlrulesar",
          "Pos.x":  860,
          "Pos.y":  -20,
          "Parent":  -1,
          "#":  45,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "countermingtl",
          "Pos.x":  290,
          "Pos.y":  120,
          "Parent":  -1,
          "#":  46,
          "Var.Type":  "Int",
          "Init":  "4",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "counterminst",
          "Pos.x":  290,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  47,
          "Var.Type":  "Int",
          "Init":  "60",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "counterminsh",
          "Pos.x":  290,
          "Pos.y":  160,
          "Parent":  -1,
          "#":  48,
          "Var.Type":  "Int",
          "Init":  "80",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "gtlstatesc",
          "Pos.x":  860,
          "Pos.y":  -40,
          "Parent":  -1,
          "#":  49,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "it",
          "Pos.x":  200,
          "Pos.y":  -190,
          "Parent":  -1,
          "#":  51,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tint5",
          "Pos.x":  730,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  52,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tdwd3",
          "Pos.x":  610,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  53,
          "Var.Type":  "Dword",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tarr2",
          "Pos.x":  780,
          "Pos.y":  140,
          "Parent":  -1,
          "#":  54,
          "Var.Type":  "Array",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "p",
          "Pos.x":  520,
          "Pos.y":  -170,
          "Parent":  -1,
          "#":  55,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "tstr",
          "Pos.x":  670,
          "Pos.y":  180,
          "Parent":  -1,
          "#":  56,
          "Var.Type":  "Str",
          "Init":  "",
          "Global":  false        
        },
        {
          "Type":  "TVar",
          "Name":  "ilp",
          "Pos.x":  200,
          "Pos.y":  -170,
          "Parent":  -1,
          "#":  57,
          "Var.Type":  "Int",
          "Init":  "",
          "Global":  false        
        }      
      ]    
    }  
  ],
  "Visual.Links":  
  [
    {
      "Type":  "TGraphLink",
      "Begin":  2,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  3,
      "End":  4,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  3,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  1,
      "End":  0,
      "Nom":  0,
      "Arrow":  true    
    },
    {
      "Type":  "TGraphLink",
      "Begin":  13,
      "End":  8,
      "Nom":  0,
      "Arrow":  true    
    }  
  ],
  "Rect.Text":  
  [
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  486,
      "Rect.Top":  -114,
      "Rect.Right":  989,
      "Rect.Bottom":  41,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  1,
      "BColor":  16738304,
      "BSize":  4,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "",
      "Color":  16777215,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  168,
      "Rect.Top":  -113,
      "Rect.Right":  475,
      "Rect.Bottom":  40,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  1,
      "BColor":  16740352,
      "BSize":  4,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "",
      "Color":  16777215,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  505,
      "Rect.Top":  42,
      "Rect.Right":  945,
      "Rect.Bottom":  104,
      "FStyle":  1,
      "FColor":  10710810,
      "BStyle":  5,
      "BColor":  16744960,
      "BSize":  3,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "Temp Vars",
      "Color":  16738304,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  486,
      "Rect.Top":  54,
      "Rect.Right":  987,
      "Rect.Bottom":  220,
      "FStyle":  1,
      "FColor":  0,
      "BStyle":  1,
      "BColor":  16737024,
      "BSize":  4,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "",
      "Color":  16777215,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  487,
      "Rect.Top":  -276,
      "Rect.Right":  988,
      "Rect.Bottom":  -240,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "Iterable Vars",
      "Color":  16740352,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  487,
      "Rect.Top":  -276,
      "Rect.Right":  990,
      "Rect.Bottom":  -123,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  1,
      "BColor":  16738304,
      "BSize":  4,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "",
      "Color":  16777215,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  169,
      "Rect.Top":  -276,
      "Rect.Right":  473,
      "Rect.Bottom":  -121,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  1,
      "BColor":  16736000,
      "BSize":  4,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "",
      "Color":  16777215,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  188,
      "Rect.Top":  -284,
      "Rect.Right":  463,
      "Rect.Bottom":  -225,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "OTHERS VaRS",
      "Color":  16738304,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  171,
      "Rect.Top":  -111,
      "Rect.Right":  473,
      "Rect.Bottom":  -73,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "CHECKERS VarS",
      "Color":  16740352,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  168,
      "Rect.Top":  54,
      "Rect.Right":  474,
      "Rect.Bottom":  219,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  1,
      "BColor":  16738304,
      "BSize":  4,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "",
      "Color":  16777215,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  183,
      "Rect.Top":  56,
      "Rect.Right":  460,
      "Rect.Bottom":  94,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "CounteRs Vars",
      "Color":  16739328,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  498,
      "Rect.Top":  -96,
      "Rect.Right":  633,
      "Rect.Bottom":  -74,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "ARRAYS",
      "Color":  16737024,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  663,
      "Rect.Top":  -116,
      "Rect.Right":  800,
      "Rect.Bottom":  -47,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "CoUnTeR\r\nARRays",
      "Color":  16741632,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  817,
      "Rect.Top":  -93,
      "Rect.Right":  970,
      "Rect.Bottom":  -74,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "GTL ARRaYs",
      "Color":  16743680,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  165,
      "Rect.Top":  229,
      "Rect.Right":  985,
      "Rect.Bottom":  455,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  1,
      "BColor":  16737024,
      "BSize":  4,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "",
      "Color":  16777215,
      "Font":  "Arial",
      "FontSize":  10,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  192,
      "Rect.Top":  261,
      "Rect.Right":  505,
      "Rect.Bottom":  295,
      "FStyle":  1,
      "FColor":  10747682,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  0,
      "BCoef":  "1",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "SCRIPTS",
      "Color":  16732672,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    },
    {
      "Type":  "TGraphRectText",
      "Rect.Left":  646,
      "Rect.Top":  262,
      "Rect.Right":  909,
      "Rect.Bottom":  293,
      "FStyle":  1,
      "FColor":  10710818,
      "BStyle":  5,
      "BColor":  14474460,
      "BSize":  1,
      "BCoef":  "0.300000011920929",
      "AlignX":  0,
      "AlignY":  0,
      "AlignRect":  false,
      "Text":  "DIALOGS",
      "Color":  16731648,
      "Font":  "Space Ranger Expanded",
      "FontSize":  14,
      "fsBold":  false,
      "fsItalic":  false,
      "fsUnderline":  false    
    }  
  ],
  "BlockPar.EC.Total.Strings":  0,
  "BlockPar.EC":  
  [
  
  ]
}